import React, {useState, useEffect} from 'react';
import 'bootstrap-icons/font/bootstrap-icons.css';
import 'bootstrap/dist/css/bootstrap.css';
import '../componentsStyle.css'
import {
    Navbar,
    Container,
    Image,
    Table
} from 'react-bootstrap';
import {Link} from 'react-router-dom';


const StudentApplicationList = (props) => {

    const applications = [
        {
            studentID: "313177",
            proposalID: "1",
            applicationStatus: "accepted"
        },
        {
            studentID: "313177",
            proposalID: "2",
            applicationStatus: "denied"
        },
        {
            studentID: "313177",
            proposalID: "3",
            applicationStatus: "pending"
        }
    ]


    const proposals = [
        {
            id: "1",
            title: "Artificial Intelligence in Healthcare Diagnostics",
            supervisor: "Dr. Dwight",
            coSupervisors: ["Dr. Eric Foreman"],
            keywords: ["AI", "healthcare", "diagnostics"],
            type: "Application Development",
            groups: ["AIHealth Group"],
            description: "Application of AI techniques to improve accuracy and efficiency in healthcare diagnostics.",
            requiredKnowledge: "Machine learning, Python, medical knowledge",
            notes: "Experience with healthcare data sets is beneficial.",
            expiration: new Date("2024-12-11"),
            level: "Masters",
            cdS: ["Biotechnology", "Health Informatics"],
            archived: false
        },
        {
            id: "2",
            title: "Machine Learning Optimization for E-commerce",
            supervisor: "Dr. Morgan",
            coSupervisors: [],
            keywords: ["machine learning", "e-commerce", "optimization"],
            type: "Research and Development",
            groups: ["EcommAI Group"],
            description: "Utilizing machine learning to optimize various aspects of e-commerce platforms.",
            requiredKnowledge: "Data analysis, Python, ML frameworks",
            notes: "Strong analytical skills and experience with large data sets required.",
            expiration: new Date("2024-01-31"),
            level: "Masters",
            cdS: ["Business Informatics", "Data Science"],
            archived: false
        },
        {
            id: "3",
            title: "Big Data Analytics for Internet of Things (IoT)",
            supervisor: "Dr. Allan",
            coSupervisors: [],
            keywords: ["big data", "IoT", "analytics"],
            type: "Data Analysis",
            groups: ["IoTData Group"],
            description: "Analysis of large datasets generated by IoT devices to gain insights and improve efficiency.",
            requiredKnowledge: "Hadoop, Spark, IoT protocols",
            notes: "Experience with sensor data and real-time analytics preferred.",
            expiration: new Date("2024-03-13"),
            level: "PhD",
            cdS: ["Information Technology", "Data Analytics"],
            archived: false
        }
    ];


    //dati statici dello studente in attesa che il login funzioni
    const stud = {
        id: '316789',
        surname: 'Rossi',
        name: 'Daniele',
        gender: 'male',
        nationality: 'Italian',
        email: 's316798@studenti.polito.it',
        codDegree: 'LM-32 (DM270)',
        enrollmentYear: '2022'
    };


    const [studentData, setStudentData] = useState({
        id: '',
        surname: '',
        name: '',
        gender: '',
        nationality: '',
        email: '',
        codDegree: '',
        enrollmentYear: '',
    });

    const [studentApplications, setStudentApplications] = useState([]);

    const [studentProposals, setStudentProposals] = useState([]);


    useEffect(() => {
        //const user = props.user;

        // const student = await studentService.fetchStudent(user.id);
        // setStudentData(student);
        setStudentData(stud);

        // const app = await applicationService.fetchApplications(user.id);
        // setStudentApplications(app);
        setStudentApplications(applications);

    }, []);

    useEffect(() => {
        /*
         const props = [];

        applications.map( (app) => {
            const propID = app.proposalID;
            const prop = await proposalService.fetchproposal(propID);
            props.push(prop);

        })
        setStudentProposals(props);

         */
        setStudentProposals(proposals);

    }, [applications]);

    return (
        <>

            <Navbar bg="secondary" fixed="top" variant="dark" className="navbar-padding">
                <Container>
                    <Link to={"/"}>
                        <Navbar.Brand>
                            <Navbar.Text>
                                <Image style={{width: 160, height: 40}} src={"../logo_thesis_management.png"}/>
                            </Navbar.Text>
                        </Navbar.Brand>
                    </Link>
                </Container>
            </Navbar>

            <Container className="mt-5">
                <h1>My Applications</h1>

                <Table striped bordered hover>
                    <thead>
                    <tr>
                        <th>#</th>
                        <th>Thesis Title</th>
                        <th>Supervisor</th>
                        <th>Type</th>
                        <th>Level</th>
                        <th>Cds</th>
                        <th>Expiration Date</th>
                        <th>State of the application</th>
                    </tr>
                    </thead>
                    <tbody>
                    {studentApplications.map((row, index) => {
                        const proposal = studentProposals.find(proposal => proposal.id === row.proposalID);

                        let statusColorClass = '';
                        switch (row.applicationStatus) {
                            case 'accepted':
                                statusColorClass = 'text-success'; // Verde
                                break;
                            case 'denied':
                                statusColorClass = 'text-danger'; // Rosso
                                break;
                            case 'pending':
                                statusColorClass = 'text-warning'; // Arancione
                                break;
                            default:
                                statusColorClass = '';
                                break;
                        }

                        return (
                            <tr key={index}>
                                <td>{index}</td>
                                <td>{proposal ? proposal.title : ''}</td>
                                <td>{proposal ? proposal.supervisor : ''}</td>
                                <td>{proposal ? proposal.type : ''}</td>
                                <td>{proposal ? proposal.level : ''}</td>
                                <td>{proposal ? proposal.cdS.join(', ') : ''}</td>
                                <td>{proposal ? proposal.expiration.toDateString() : ''}</td>
                                <td className={statusColorClass}>{row.applicationStatus}</td>
                            </tr>
                        );
                    })}
                    </tbody>
                </Table>
            </Container>
        </>

    )
}
export default StudentApplicationList;