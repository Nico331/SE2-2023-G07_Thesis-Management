import React, {useState, useEffect, useContext} from 'react';
import 'bootstrap-icons/font/bootstrap-icons.css';
import 'bootstrap/dist/css/bootstrap.css';
import '../componentsStyle.css'
import ProposalService from "../../services/ProposalService";
import ApplicationService from "../../services/ApplicationService";
import StudentService from "../../services/StudentService";
import {
    Navbar,
    Container,
    Image,
    Table
} from 'react-bootstrap';
import {Link} from 'react-router-dom';
import {UserContext} from "../../contexts/UserContexts";

const StudentApplicationList = (props) => {



    // const applications = [
    //     {
    //         studentID: "313177",
    //         proposalID: "1",
    //         applicationStatus: "accepted"
    //     },
    //     {
    //         studentID: "313177",
    //         proposalID: "2",
    //         applicationStatus: "denied"
    //     },
    //     {
    //         studentID: "313177",
    //         proposalID: "3",
    //         applicationStatus: "pending"
    //     }
    // ]


    // const proposals = [
    //     {
    //         id: "1",
    //         title: "Artificial Intelligence in Healthcare Diagnostics",
    //         supervisor: "Dr. Dwight",
    //         coSupervisors: ["Dr. Eric Foreman"],
    //         keywords: ["AI", "healthcare", "diagnostics"],
    //         type: "Application Development",
    //         groups: ["AIHealth Group"],
    //         description: "Application of AI techniques to improve accuracy and efficiency in healthcare diagnostics.",
    //         requiredKnowledge: "Machine learning, Python, medical knowledge",
    //         notes: "Experience with healthcare data sets is beneficial.",
    //         expiration: new Date("2024-12-11"),
    //         level: "Masters",
    //         cdS: ["Biotechnology", "Health Informatics"],
    //         archived: false
    //     },
    //     {
    //         id: "2",
    //         title: "Machine Learning Optimization for E-commerce",
    //         supervisor: "Dr. Morgan",
    //         coSupervisors: [],
    //         keywords: ["machine learning", "e-commerce", "optimization"],
    //         type: "Research and Development",
    //         groups: ["EcommAI Group"],
    //         description: "Utilizing machine learning to optimize various aspects of e-commerce platforms.",
    //         requiredKnowledge: "Data analysis, Python, ML frameworks",
    //         notes: "Strong analytical skills and experience with large data sets required.",
    //         expiration: new Date("2024-01-31"),
    //         level: "Masters",
    //         cdS: ["Business Informatics", "Data Science"],
    //         archived: false
    //     },
    //     {
    //         id: "3",
    //         title: "Big Data Analytics for Internet of Things (IoT)",
    //         supervisor: "Dr. Allan",
    //         coSupervisors: [],
    //         keywords: ["big data", "IoT", "analytics"],
    //         type: "Data Analysis",
    //         groups: ["IoTData Group"],
    //         description: "Analysis of large datasets generated by IoT devices to gain insights and improve efficiency.",
    //         requiredKnowledge: "Hadoop, Spark, IoT protocols",
    //         notes: "Experience with sensor data and real-time analytics preferred.",
    //         expiration: new Date("2024-03-13"),
    //         level: "PhD",
    //         cdS: ["Information Technology", "Data Analytics"],
    //         archived: false
    //     }
    // ];

    const [user, setUser] = useState(JSON.parse(localStorage.getItem("user")));
    const [studentApplications, setStudentApplications] = useState([]);
    const [studentProposals, setStudentProposals] = useState([]);

    const getApplicationsProposals = async () => {
        const apps = await ApplicationService.getApplicationByStudentId(user.id.toString());
        const props = await ProposalService.fetchAllProposals();
        setStudentApplications(apps.data);
        setStudentProposals(props.data);
    }

    useEffect(()=>{
        getApplicationsProposals();
        console.log(studentApplications);
    },[])

    // useEffect(() => {
    //
    //     const fetchUser = () => {
    //         setStudentData(user);
    //     };
    //     const fetchData = async () => {
    //
    //         try {
    //             const apps = await ApplicationService.getApplicationByStudentId(user);
    //             console.log("apps.data "+apps.data);
    //             setStudentApplications(apps.data);
    //         } catch (error) {
    //             // Gestione degli errori, ad esempio set della variabile d'errore o log
    //             console.error("Error fetching data:", error);
    //         }
    //     };
    //     fetchUser();
    //     fetchData(); // Chiamata alla funzione fetchData
    //
    // }, [user]); // Assicurati di includere tutte le dipendenze necessarie, come ad esempio user.id


    // useEffect(() => {
    //
    //     const fetchProposals = async () => {
    //         console.log(studentApplications);
    //         const props = [];
    //         studentApplications.map( async (app) => {
    //             console.log(app.proposalId);
    //             const propID = app.proposalId;
    //             const prop = await ProposalService.getProposalById(propID);
    //             props.push(prop.data);
    //
    //         })
    //         setStudentProposals(props);
    //
    //     }
    //
    //     fetchProposals();
    //
    // }, [studentApplications.length]);

    return (
        <>

            <Container className="mt-5">
                <h1 className="mt-3">My Applications</h1>

                <Table className="mt-5" striped bordered hover>
                    <thead>
                    <tr>
                        <th>#</th>
                        <th>Thesis Title</th>
                        <th>Supervisor</th>
                        <th>Type</th>
                        <th>Level</th>
                        <th>Cds</th>
                        <th>Expiration Date</th>
                        <th>State of the application</th>
                    </tr>
                    </thead>
                    <tbody>
                    {studentApplications.map((row, index) => {
                        const proposal = studentProposals.find(proposal => proposal.id === row.proposalId);
                        const expiration = new Date(proposal.expiration).toDateString()

                        let statusColorClass = '';
                        switch (row.status) {
                            case 'ACCEPTED':
                                statusColorClass = 'text-success'; // Verde
                                break;
                            case 'DENIED':
                                statusColorClass = 'text-danger'; // Rosso
                                break;
                            case 'PENDING':
                                statusColorClass = 'text-warning'; // Arancione
                                break;
                            default:
                                statusColorClass = '';
                                break;
                        }

                        return (
                            <tr key={index}>
                                <td>{index}</td>
                                <td>{proposal ? proposal.title : ''}</td>
                                <td>{proposal ? proposal.supervisor : ''}</td>
                                <td>{proposal ? proposal.type : ''}</td>
                                <td>{proposal ? proposal.level : ''}</td>
                                <td>{proposal ? proposal.cdS.join(', ') : ''}</td>
                                <td>{proposal ? expiration : ''}</td>
                                <td className={statusColorClass}>{row.status}</td>
                            </tr>
                        );
                    })}
                    </tbody>
                </Table>
            </Container>
        </>

    )
}
export default StudentApplicationList;
